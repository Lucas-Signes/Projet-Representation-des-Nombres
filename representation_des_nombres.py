#representation_des_nombres.pyfrom entiers import *from entiers_en_machine import *        #on importe les instructions du module pour pouvoir les réutiliserfrom non_entiers import *from flottants_format_ieee_754 import *bit = 16#INSTRUCTION 35:def saisir_nombre ():    """        Returns    -------    dec:         Nombre en base octal ou héxadécimal.        L:        Liste de la représentation en binaire ou en héxadécimal d'un nombre sur b bits.    """    base = ""    while base != "décimal" and base != "binaire" and base != "octal" and base != "héxadécimal":         base = input("Saisir une base: ")        if base == "décimal" :        dec = input("Saisir un entier dans la base souhaitée: ")        if "." in dec:            dec = float(dec)  #on verifie que s'il y a un . c'est un float sinon c'est un int.        else:            dec = int(dec)                if dec < 0:            signe = "-" #si dec est infèrieur à 0 il est négatif sinon positif.            dec *= -1                else:            signe = "+"                return(dec,base,signe)            elif base == "binaire" or base == "héxadécimal" or base == "octal":         p = int(input("Sur combien de bits? "))          signe = ""         while signe != "+" and signe != "-":             signe = input("entrez le signe ")                     L = []         for i in range(p):            b = input("Valeur du bit? ")            if b != "A" and b != "B" and b != "C" and b != "D" and b != "E"  and b != "F":                b = int(b)            L.append(b)                         return(L,base,signe) #Fonctions Auxilières pour un affichage plus claire de convertir pour l'utilisateur:               def affichage_dec_entier (dico1):    print(dico1["signe"],dico1["représentation en décimal "]) #affichage du signe et de la représentation en décimal    print(dico1["signe"],end="")                              #affichage du signe puis sans saut de ligne de la représentation biniare    afficher_binaire(dico1["représentation binaire "])    print(dico1["représentation en complément à 2 "])         #affichage du complément a 2     print(dico1["signe"],dico1["représentation en héxadécimal "]) #affichage de l'héxadécimal               def affichage_dec_float (dico2, dico_secondaire):    print(dico2["signe"],dico2["représentation décimal "]) #affichage du signe et de la representation décimal    print(dico2["signe"],end="")    afficher_binaire(dico_secondaire["entier"])    afficher_binaire(dico_secondaire["virgule"])    afficher_ieee(dico2["représentation en IEEE "])             def affichage_oct (dico3): #pareil que pour affichage_dec_entier    print(dico3["signe"],dico3["représentation en décimal "])     print(dico3["signe"],end="")    afficher_binaire(dico3["représentation binaire "])    print(dico3["représentation en complément à 2 "])    print(dico3["signe"],dico3["représentation en héxadécimal "])             def affichage_hexa (dico4): #pareil que pour affichage_dec_entier    print(dico4["signe"],dico4["représentation en décimal "])     print(dico4["signe"],end="")    afficher_binaire(dico4["représentation binaire "])    print(dico4["représentation en complément à 2 "])    print(dico4["signe"],dico4["représentation en héxadécimal "])             def affichage_bin (dico5):  #pareil que pour affichage_dec_entier    print(dico5["signe"],dico5["représentation en décimal "])    print(dico5["signe"],end="")    afficher_binaire(dico5["représentation binaire "])    print(dico5["représentation en complément à 2 "])    print(dico5["signe"],dico5["représentation en héxadécimal "])             #INSTRUCTION 36:def convertir ():    """    Fonction menu de conversion de base pour utilisteur qui sauvgarde les valeurs dans des dictionnaires    """        print("""                         *****BIENVENUE SUR LE MEILLEUR CONVERTISSEUR*****                           BASE       |          CONVERTIONS                  | SIGNE          ------------------|---------------------------------------|-------           DÉCIMAL ENTIER:  | nombre entier ->     -signe           |                            |                      -décimal         |           DÉCIMAL FLOTANT: |                      -binaire         |   +                            |                      -complément à 2  |           OCTAL:           |                      -héxadécimal     |   OU                            |                                       |           HÉXADÉCIMAL:     | nombre non-entier -> -signe           |   -                            |                      -décimal         |           BINAIRE:         |                      -biniare         |                            |                      -IEEE            |                                       """)    n, base,signe = saisir_nombre()            if type(n) == float:                dico_dec_float = {"signe": signe,                          "représentation décimal ": n,                          "représentation binaire ": fractionnaire_dec_vers_bin({"entier": int(n), "virgule": n-int(n)}, bit),                          "représentation en IEEE ": dec_vers_ieee(n)                          }                dico_secondaire = fractionnaire_dec_vers_bin({"entier": int(n), "virgule": n-int(n)}) #on fait un deuxieme dico pour "convertir" le dictionnaire de fractionnaire_dec_vers_bin en liste liste pour afficher la partie "entière" et une pour la partie apres la virgule "virgule"                                                                                                        affichage_dec_float(dico_dec_float, dico_secondaire)                    elif type(n) == int:                                                                                                                dico_dec = {"signe": signe,                    "représentation en décimal ": n,                    "représentation binaire ": dec_vers_bin_machine(n, bit),                    "représentation en complément à 2 ": dec_vers_compl2(n, bit),                    "représentation en héxadécimal ": dec_vers_hex(n)                    }        affichage_dec_entier(dico_dec)                    elif type(n) == list:            if base == "octal":                    dico_oct = {"signe": signe,                            "représentation en décimal ":n,                            "représentation binaire ": dec_vers_bin_machine(oct_vers_dec(n), bit), #on passe par le décimal pour convertir l'octal                            "représentation en complément à 2 ": dec_vers_compl2(oct_vers_dec(n), bit),                            "représentation en héxadécimal ": dec_vers_hex(oct_vers_dec(n))                            }                affichage_oct(dico_oct)                                            elif base == "héxadécimal":                    dico_hexa = {"signe": signe,                             "représentation en décimal ": hex_vers_dec(n),                             "représentation binaire ": dec_vers_bin_machine(hex_vers_dec(n), bit), #pareil pour héxadécimal que pour octal                             "représentation en complément à 2 ": dec_vers_compl2(hex_vers_dec(n), bit),                             "représentation en héxadécimal ": n                             }                affichage_hexa(dico_hexa)                                            elif base == "binaire": #on traite sur du binaire non signé sauf pour le complément à 2                    dico_bin = {"signe": signe,                            "représentation en décimal ": bin_vers_dec_machine(n, bit),                            "représentation binaire ": n,                            "représentation en complément à 2 ": dec_vers_compl2(bin_vers_dec(n), bit),                            "représentation en héxadécimal ": dec_vers_hex(bin_vers_dec(n))                                 }                affichage_bin(dico_bin)                convertir ()                